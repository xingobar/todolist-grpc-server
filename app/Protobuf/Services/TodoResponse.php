<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: services/todo_services.proto

namespace Protobuf\Services;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>services.TodoResponse</code>
 */
class TodoResponse extends \Google\Protobuf\Internal\Message
{
    protected $response;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Protobuf\Entity\Todo $todo
     *     @type \Protobuf\Entity\Error $error
     * }
     */
    public function __construct($data = NULL) {
        \Protobuf\GPBMetadata\TodoServices::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.entity.Todo todo = 1;</code>
     * @return \Protobuf\Entity\Todo|null
     */
    public function getTodo()
    {
        return $this->readOneof(1);
    }

    public function hasTodo()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.entity.Todo todo = 1;</code>
     * @param \Protobuf\Entity\Todo $var
     * @return $this
     */
    public function setTodo($var)
    {
        GPBUtil::checkMessage($var, \Protobuf\Entity\Todo::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.entity.Error error = 2;</code>
     * @return \Protobuf\Entity\Error|null
     */
    public function getError()
    {
        return $this->readOneof(2);
    }

    public function hasError()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.entity.Error error = 2;</code>
     * @param \Protobuf\Entity\Error $var
     * @return $this
     */
    public function setError($var)
    {
        GPBUtil::checkMessage($var, \Protobuf\Entity\Error::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getResponse()
    {
        return $this->whichOneof("response");
    }

}

